version: '3.7'
services:
  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - ${REDIS_PORT2}:${REDIS_PORT2}
      # - "127.0.0.1:6379:6379"
    volumes:
      - ./redis:/data
    networks:
      - phonesjumia

  jumiascraperdb:
    image: postgres:15
    container_name: jumiascraperdb
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${DB_PORT2}:${DB_PORT2}
    env_file:
      - .env
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./logs/pglogs:/var/log/postgresql
    logging:
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - phonesjumia
    command:
      - "postgres"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "log_destination=stderr"
      # sql-executor:
      #   image: postgres:15
      #   volumes:
      #     - ./sql_scripts:/scripts
      #   env_file:
      #     - .env
      #   networks:
      #     - phonesjumia
      #   links:
      #     - jumiascraperdb
      #   depends_on:
      #     - jumiascraperdb
      #   command: sh -c 'sleep 10 && PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /scripts/create_tables.sql'

      # jumiascraper:
      #   build:
      #     context: .
      #     dockerfile: Dockerfile
      #   container_name: jumiascraper
      #   env_file:
      #     - .env
      #   networks:
      #     - phonesjumia
      #   volumes:
      #     - ./jumiascraper:/app/jumiascraper
      #     - jumiascraper_extracted:/app/dataset/extracted
      #   command: >
      #     bash -c "python3 run.py && python3 processing/ingestion.py && touch /completed"
      #   depends_on:
      #     sql-executor:
      #       condition: service_completed_successfully

      # dbt:
      #   build:
      #     context: ./dbt_jumiascraper
      #     dockerfile: Dockerfile.dbt
      #     target: dbt-postgres
      #   container_name: dbt-jumiascraper
      #   volumes:
      #     - ./dbt_jumiascraper:/app/dbt_jumiascraper
      #     - jumiascraper_extracted:/app/dataset/extracted
      #     - jumiascraper_normalized:/app/dataset/normalized
      #     - ./processing:/app/processing
      #   ports:
      #     - ${PORT}:${PORT}
      #   env_file:
      #     - .env
      #   networks:
      #     - phonesjumia
      #   command: "build"

      # "build"
      # depends_on:
      #   jumiascraper:
      #     condition: service_completed_successfully
      # - sql-executor
      # pgadmin:
      #   container_name: pgadmin
      #   image: dpage/pgadmin4
      #   env_file:
      #     - .env
      #   networks:
      #     - phonesjumia
      #   ports:
      #     - ${HOSTPORT}:${LOCALPORT}

  superset:
    build:
      context: ./superset
      dockerfile: Dockerfile.superset
    # image: apache/superset:latest-dev
    container_name: superset
    env_file:
      - .env
    ports:
      - ${SUPERSET_PORT}:${SUPERSET_PORT}
    volumes:
      - ./superset/superset_config.py:/app/superset/superset_config.py
      - ./superset:/var/lib/superset
      # - ./superset:/app/superset
    networks:
      - phonesjumia
    links:
      - jumiascraperdb
    depends_on:
      - jumiascraperdb
    command: superset run -p ${SUPERSET_PORT} --with-threads --reload --debugger
    # command: "bash -c 'superset run -p ${SUPERSET_PORT}'"

networks:
  phonesjumia:
    name: phonesjumia
    driver: bridge

volumes:
  jumiascraper_extracted:
  jumiascraper_normalized:
  pgdata:
  pglogs:
  superset:
